# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %%
# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]


# %%
# 1
# Update Recorded Damages

def convert_damages(damages_list):
    new_damage_list = []
    conversion = {"M": 1000000, "B": 1000000000}

    for damage in damages_list:
        if damage == 'Damages not recorded':
            new_damage_list.append("Damages not recorded")
        elif damage[-1] in conversion.keys():
            converted =  float(damage.strip(damage[-1])) * conversion[damage[-1]]
            new_damage_list.append(converted)
    return new_damage_list

updated_damages = convert_damages(damages)
print(updated_damages)


# %%
# create a hurricane dictionary

def hurricane_dictionary(names,months,year,max_sustained_wind, areas_affected,damages,deaths):
    hurricane_list ={}
    len_hurricanes= len(names)

    for i in range(len_hurricanes):
        hurricane_list[names[i]] = {"Name": names[i],
                                    "Month": months[i],
                                    "Year": year[i],
                                    "Max Sustained Wind": max_sustained_wind[i],
                                    "Areas Affected": areas_affected[i],
                                    "Damages": damages[i],
                                    "Deaths": deaths[i]
                                    }
    return hurricane_list 
    
hurricanes_names_data = hurricane_dictionary(names,months,years,max_sustained_winds, areas_affected,updated_damages,deaths)
print(hurricanes_names_data)


# %%
#Creating a dictionary with Year as key
def hurricanes_by_year(names,months,years,max_sustained_winds, areas_affected,damages,deaths):
    years_dict = []
    for n,m,y,ma,a,da,z in zip(names,months,years,max_sustained_winds, areas_affected,damages,deaths):
        dict = {y:{'Name':n,'Month':m,'Year':y,'Max_sustained_wind':ma,'Areas Affected': a,'Damage': da, 'Deaths': z}}
        years_dict.append(dict)
    return years_dict 
years_list = hurricanes_by_year(names,months,years,max_sustained_winds, areas_affected,updated_damages,deaths)
print(years_list)


# %%
# Creating a function to get the hurricanes data based on year

def hurricane_year(year):
    hurrincane_year_list = []
    for hurricanes in hurricanes_names_data:
        if hurricanes_names_data[hurricanes]["Year"] == year:
            hurrincane_year_list.append(hurricanes_names_data[hurricanes])
    return hurrincane_year_list
print(hurricane_year(2005)) 


# %%
# Counting Damaged Areas

# create dictionary of areas to store the number of hurricanes involved in

def areas_affected(hurricanes_data):
    areas_count={}
    for hurricanes in hurricanes_data:
        for areas in hurricanes_data[hurricanes]["Areas Affected"]:
            if areas in areas_count:
                areas_count[areas] += 1
            else:
                areas_count[areas] = 1
    return areas_count

hurricanes_areas_list =(areas_affected(hurricanes_names_data))
print(hurricanes_areas_list)


# %%
# Calculating Maximum Hurricane Count

# find most frequently affected area and the number of hurricanes involved in

def max_affected_area(hurricanes_area_list):
    max_area = ''
    max_count = 0

    for area in hurricanes_area_list:
        if hurricanes_area_list[area] > max_count:
            max_area = area
            max_count = hurricanes_area_list[area]
    return max_area,max_count
print(max_affected_area(hurricanes_areas_list))


# %%
# 6
# Calculating the Deadliest Hurricane

def deadliest_hurricane(hurricanes_list):
    deadliest_hurricane = ''
    death_count = 0
    for hurricane in hurricanes_list:
        if hurricanes_list[hurricane]["Deaths"] > death_count:
            deadliest_hurricane = hurricane
            death_count = hurricanes_list[hurricane]["Deaths"]
    return deadliest_hurricane,death_count
print(deadliest_hurricane(hurricanes_names_data))


# %%
# 7
# Rating Hurricanes by Mortality


def hurricanes_by_mortality(hurricanes_list):
    hurricanes_by_mortality = {0:[],1:[],2:[],3:[],4:[],5:[]}
    mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}

    for hurricane in hurricanes_list:
        rate = 0
        deaths = hurricanes_list[hurricane]["Deaths"]
        if deaths > 0 and deaths <= 100:
            rate = 1
        elif deaths > 100 and deaths <= 500:
            rate = 2
        elif deaths > 500 and deaths <= 1000:
            rate = 3
        elif deaths > 1000 and deaths <= 10000:
            rate = 4

        hurricanes_by_mortality[rate].append(hurricane)
    return hurricanes_by_mortality  

print(hurricanes_by_mortality(hurricanes_names_data))


# %%
# Calculating Hurricane Maximum Damage

# find highest damage inducing hurricane and its total cost

def max_hurricane_damage(hurricane_list):
    max_damage_hurricane = ''
    max_damage_cost = 0
    for hurricane in hurricane_list:
        if hurricane_list[hurricane]["Damages"] == 'Damages not recorded':
         continue
        if hurricane_list[hurricane]["Damages"] > max_damage_cost:
            max_damage_hurricane = hurricane
            max_damage_cost = hurricane_list[hurricane]["Damages"]
    return max_damage_hurricane,max_damage_cost

print(max_hurricane_damage(hurricanes_names_data))


# %%
# categorize hurricanes in new dictionary with damage severity as key

damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
damage_scale_dict = {0:[],1:[], 2:[], 3:[] , 4:[]}

def hurricane_damage_rating(hurricane_list):
    for hurricane in hurricane_list:
     rating = 0
     damages  = hurricane_list[hurricane]["Damages"]
     if damages == "Damages not recorded":
        continue
     if damages > damage_scale[0] and damages <= damage_scale[1]:
        rating = 1
     if damages > damage_scale[1] and damages <= damage_scale[2]:
        rating = 2
     if damages > damage_scale[2] and damages <= damage_scale[3]:
        rating = 3
     if damages > damage_scale[3] and damages <= damage_scale[4]:
        rating = 4
     damage_scale_dict[rating].append(hurricane_list[hurricane])
    return damage_scale_dict

print(hurricane_damage_rating(hurricanes_names_data))




